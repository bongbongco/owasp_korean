============================================================================================
OTG-ERR-001 (에러 코드 분석)
============================================================================================

|

개요
==========================================================================================

웹 어플리케이션에 침투 테스트를 하는 동안, 어플리케이션 또는 웹 서버에서 생성된 많은 에러 코드를 자주 볼 수 있습니다.
이것은 특수하게 조작된 요청 툴 또는 수동 생성 요청을 사용하여 이러한 에러가 표시되도록 하는 것이 가능합니다.
이러한  코드는 웹 웹 어플리케이션과 직접 연결된 데이터베이스, 버그 및 기타 기술 구성 요소에 대한 많은 정보를 공개하기 때문에, 침투 테스터에게 매우 유용한 정보입니다.

이번 섹션에서는 일반 에러 메시지 코드를 분석하고 취약성 평가시 관련된 부분에 초점을 가질 것입니다.
이 활동의 가장 중요한 측면은 분석의 다음 단계에 도움이 되는 정보 수집으로, 이러한 오류에 대한 자신의 관심을 집중하는 것입니다. 좋은 정보 수집은 침투 테스트를 수행하는데 걸리는 총 시간을 감소시킴으로써 평가 효율을 용이하게 할 수 있습니다.

Attackers sometimes use search engines to locate errors that disclose information. Searches can be performed to find any erroneous sites as random victims, or it is possible to search for errors in a specific site using the search engine filtering tools as described in 4.2.1 Conduct Search Engine Discovery and Reconnaissance for Information Leakage (OTG-INFO-001) 

|

Web Server Errors 
==========================================================================================

A common error that we can see during testing is the HTTP 404 Not Found. Often this error code provides useful details about the underlying web server and associated components. For example: 

.. code-block:: html

    Not Found 
    The requested URL /page.html was not found on this server. 
    Apache/2.2.3 (Unix) mod_ssl/2.2.3 OpenSSL/0.9.7g  DAV/2 
    PHP/5.1.2 Server at localhost Port 80 

This error message can be generated by requesting a non-existent URL. After the common message that shows a page not found, there is information about web server version, OS, modules and other products used. This information can be very important from an OS and application type and version identification point of view. 

Other HTTP response codes such as 400 Bad Request, 405 Method Not Allowed, 501 Method Not Implemented, 408 Request Time-out and 505 HTTP Version Not Supported can be forced by an attacker. When receiving specially crafted requests, web servers may provide one of these error codes depending on their HTTP implementation. 

Testing for disclosed information in the Web Server error codes is related testing for information disclosed in the HTTP headers as described in the section Fingerprint Web Server (OTG-INFO-002). 

|

Application Server Errors 
==========================================================================================

Application errors are returned by the application itself, rather than the web server. These could be error messages from framework code (ASP, JSP etc.) or they could be specific errors returned by the application code. Detailed application errors typically provide information of server paths, installed libraries and application versions. 

|

Database Errors 
==========================================================================================

Database errors are those returned by the Database System when there is a problem with the query or the connection. Each Database system, such as MySQL, Oracle or MSSQL, has their own set of errors. Those errors can provide sensible information such as Database server IPs, tables, columns and login details. 
In addition, there are many SQL Injection exploitation techniques that utilize detailed error messages from the database driver, for in depth information on this issue see Testing for SQL Injection (OTG-INPVAL-005) for more information. 
Web server errors aren't the only useful output returned requiring security analysis. Consider the next example error message: 

.. code-block:: html

    Microsoft OLE DB Provider for ODBC Drivers (0x80004005) 
    [DBNETLIB][ConnectionOpen(Connect())] - SQL server does not 
    exist or access denied 

What happened? We will explain step-by-step below. 
In this example, the 80004005 is a generic IIS error code which indicates that it could not establish a connection to its associated database. In many cases, the error message will detail the type of the database. This will often indicate the underlying operating system by association. With this information, the penetration tester can plan an appropriate strategy for the security test. 

By manipulating the variables that are passed to the database connect string, we can invoke more detailed errors. 

.. code-block:: html

    Microsoft OLE DB Provider for ODBC Drivers error '80004005' 
    [Microsoft][ODBC Access 97 ODBC driver Driver]General error 
    Unable to open registry key 'DriverId' 

In this example, we can see a generic error in the same situation which reveals the type and version of the associated database system and a dependence on Windows operating system registry key values. 
Now we will look at a practical example with a security test against a web application that loses its link to its database server and does not handle the exception in a controlled manner. This could be caused by a database name resolution issue, processing of unexpected variable values, or other network problems. 
Consider the scenario where we have a database administration web portal, which can be used as a front end GUI to issue database queries, create tables, and modify database fields. During the POST of the logon credentials, the following error message is presented to the penetration tester. The message indicates the presence of a MySQL database server: 

.. code-block:: html

    Microsoft OLE DB Provider for ODBC Drivers (0x80004005) 
    [MySQL][ODBC 3.51 Driver]Unknown MySQL server host 

If we see in the HTML code of the logon page the presence of a hidden field with a database IP, we can try to change this value in the URL with the address of database server under the penetration tester's control in an attempt to fool the application into thinking that the logon was successful. 
Another example: knowing the database server that services a web application, we can take advantage of this information to carry out a SQL Injection for that kind of database or a persistent XSS test. 

|

How to Test 
==========================================================================================

다음은 사용자에게 리턴하는 자세한 에러 메시지에 대한 테스트 예제입니다. 아래 각 예제들은 운영 체제, 어플리케이션 버전 등에 대해 관련 정보를 가지고 있습니다.

Test: 404 Not Found 

.. code-block:: html

    telnet <host target> 80 
    GET /<wrong page> HTTP/1.1 
    host: <host target> 
    <CRLF><CRLF> 


Result: 

.. code-block:: html

    HTTP/1.1 404 Not Found 
    Date: Sat, 04 Nov 2006 15:26:48 GMT 
    Server: Apache/2.2.3 (Unix) mod_ssl/2.2.3 OpenSSL/0.9.7g 
    Content-Length: 310 
    Connection: close 
    Content-Type: text/html; charset=iso-8859-1 
    ... 
    <title>404 Not Found</title> 
    ... 
    <address>Apache/2.2.3 (Unix) mod_ssl/2.2.3 OpenSSL/0.9.7g 
    at <host target> Port 80</address> 

|

Test: 

.. code-block:: html

    Network problems leading to the application being unable to 
    access the database server 

Result: 

.. code-block:: html

    Microsoft OLE DB Provider for ODBC Drivers (0x80004005) ' 
    [MySQL][ODBC 3.51 Driver]Unknown MySQL server host 

|

Test: 

.. code-block:: html

    Authentication failure due to missing credentials 

Result: 
Firewall version used for authentication: 

.. code-block:: html
    
    Error 407 
    FW-1 at <firewall>: Unauthorized to access the document. 
    - Authorization is needed for FW-1. 
    - The authentication required by FW-1 is: unknown. 
    - Reason for failure of last attempt: no user 

|

Test: 400 Bad Request 

.. code-block:: html

    telnet <host target> 80 
    GET / HTTP/1.1 
    <CRLF><CRLF> 

Result: 

.. code-block:: html

    HTTP/1.1 400 Bad Request
    Date: Fri, 06 Dec 2013 23:57:53 GMT
    Server: Apache/2.2.22 (Ubuntu) PHP/5.3.10-1ubuntu3.9 with 
    Suhosin-Patch 
    Vary: Accept-Encoding 
    Content-Length: 301 
    Connection: close 
    Content-Type: text/html; charset=iso-8859-1 
    ... 
    <title>400 Bad Request</title> 
    ... 
    <address>Apache/2.2.22 (Ubuntu) PHP/5.3.10-1ubuntu3.9 
    with Suhosin-Patch at 127.0.1.1 Port 80</address> 
    ... 

|

Test: 405 Method Not Allowed 

.. code-block:: html

    telnet <host target> 80 
    PUT /index.html HTTP/1.1 
    Host: <host target> 
    <CRLF><CRLF> 

Result: 

.. code-block:: html

    HTTP/1.1 405 Method Not Allowed 
    Date: Fri, 07 Dec 2013 00:48:57 GMT 
    Server: Apache/2.2.22 (Ubuntu) PHP/5.3.10-1ubuntu3.9 with 
    Suhosin-Patch 
    Allow: GET, HEAD, POST, OPTIONS 
    Vary: Accept-Encoding 
    Content-Length: 315 
    Connection: close 
    Content-Type: text/html; 
    charset=iso-8859-1 
    ... 
    <title>405 Method Not Allowed</title> 
    ... 
    <address>Apache/2.2.22 (Ubuntu) PHP/5.3.10-1ubuntu3.9 
    with Suhosin-Patch at <host target> Port 80</address> 
    ... 

|

Test: 408 Request Time-out 

.. code-block:: html

    telnet <host target> 80 
    GET / HTTP/1.1 
    -Wait X seconds . (Depending on the target server, 21 
    seconds for Apache by default) 

Result: 

.. code-block:: html

    HTTP/1.1 408 Request Time-out 
    Date: Fri, 07 Dec 2013 00:58:33 GMT 
    Server: Apache/2.2.22 (Ubuntu) PHP/5.3.10-1ubuntu3.9 with 
    Suhosin-Patch 
    Vary: Accept-Encoding 
    Content-Length: 298 
    Connection: close 
    Content-Type: text/html; charset=iso-8859-1 
    ... 
    <title>408 Request Time-out</title> 
    ... 
    <address>Apache/2.2.22 (Ubuntu) PHP/5.3.10-1ubuntu3.9 
    with Suhosin-Patch at <host target> Port 80</address> 
    ... 

|

Test: 501 Method Not Implemented 

.. code-block:: html

    telnet <host target> 80 
    RENAME /index.html HTTP/1.1 
    Host: <host target> 
    <CRLF><CRLF> 

Result: 

.. code-block:: html

    HTTP/1.1 501 Method Not Implemented 
    Date: Fri, 08 Dec 2013 09:59:32 GMT 
    Server: Apache/2.2.22 (Ubuntu) PHP/5.3.10-1ubuntu3.9 with 
    Suhosin-Patch 
    Allow: GET, HEAD, POST, OPTIONS 
    Vary: Accept-Encoding 
    Content-Length: 299 
    Connection: close 
    Content-Type: text/html; charset=iso-8859-1 
    ... 
    <title>501 Method Not Implemented</title> 
    ... 
    <address>Apache/2.2.22 (Ubuntu) PHP/5.3.10-1ubuntu3.9 
    with Suhosin-Patch at <host target> Port 80</address> 
    ... 

|

Test: 

.. code-block:: html

    Enumeration of directories by using access denied error messages:<br> 
    http://<host>/<dir> 


Result: 

.. code-block:: html

    Directory Listing Denied 
    This Virtual Directory does not allow contents to be listed. 

|

Tools
==========================================================================================

- ErrorMint - http://sourceforge.net/projects/errormint/ 
- ZAP Proxy - https://www.owasp.org/index.php/OWASP_Zed_ Attack_Proxy_Project 

|

References 
==========================================================================================

- [RFC2616] Hypertext Transfer Protocol -- HTTP/1.1 
- [ErrorDocument] Apache ErrorDocument Directive 
- [AllowOverride] Apache AllowOverride Directive 
- [ServerTokens] Apache ServerTokens Directive 
- [ServerSignature] Apache ServerSignature Directive 

|

Remediation 
==========================================================================================

**Error Handling in IIS and ASP .net**

ASP .net is a common framework from Microsoft used for developing web applications. IIS is one of the commonly used web servers. Errors occur in all applications, developers try to trap most errors but it is almost impossible to cover each and every exception (it is however possible to configure the web server to suppress detailed error messages from being returned to the user). 
IIS uses a set of custom error pages generally found in c:\winnt\ help\iishelp\common to display errors like '404 page not found' to the user. These default pages can be changed and custom errors can be configured for IIS server. When IIS receives a request for an aspx page, the request is passed on to the dot net framework. 
There are various ways by which errors can be handled in dot net framework. Errors are handled at three places in ASP .net: 

- Inside Web.config customErrors section 
- Inside global.asax Application_Error Sub 
- At the the aspx or associated codebehind page in the Page_Error sub 


**Handling errors using web.config**

.. code-block:: html

    <customErrors defaultRedirect="myerrorpagedefault.aspx" 
    mode="On|Off|RemoteOnly">
    <error statusCode="404" redirect="myerrorpagefor404. 
    aspx"/>
    <error statusCode="500" redirect="myerrorpagefor500. 
    aspx"/> 
    </customErrors> 

mode="On" will turn on custom errors. mode=RemoteOnly will show custom errors to the remote web application users. A user accessing the server locally will be presented with the complete stack trace and custom errors will not be shown to him. All the errors, except those explicitly specified, will cause a redirection to the resource specified by defaultRedirect, i.e., myerrorpagedefault.aspx. A status code 404 will be handled by myerrorpagefor404.aspx. 


**Handling errors in Global.asax**

When an error occurs, the Application_Error sub is called. A developer can write code for error handling/page redirection in this sub. 

.. code-block:: html

    Private Sub Application_Error (ByVal sender As Object, ByVal e 
    As System.EventArgs)
        Handles MyBase.Error 
    End Sub 

**Handling errors in Page_Error sub**

This is similar to application error. 

.. code-block:: html

    Private Sub Page_Error (ByVal sender As Object, ByVal e As 
    System.EventArgs)
        Handles MyBase.Error 
    End Sub 

**Error hierarchy in ASP .net**

Page_Error sub will be processed first, followed by global.asax Application_Error sub, and, finally, customErrors section in web. config file. 
Information Gathering on web applications with server-side technology is quite difficult, but the information discovered can be useful for the correct execution of an attempted exploit (for example, SQL injection or Cross Site Scripting (XSS) attacks) and can reduce false positives. 

**How to test for ASP.net and IIS Error Handling**

Fire up your browser and type a random page name 

.. code-block:: html

    http:\\www.mywebserver.com\anyrandomname.asp 

If the server returns 

.. code-block:: html

    The page cannot be found 
    Internet Information Services 

it means that IIS custom errors are not configured. Please note the .asp extension. 
Also test for .net custom errors. Type a random page name with aspx extension in your browser 

.. code-block:: html

    http:\\www.mywebserver.com\anyrandomname.aspx 

If the server returns 

.. code-block:: html

    Server Error in '/' Application. 
    ---------------------------------------------------------------
    -----------------
    The resource cannot be found. 
    Description: HTTP 404. The resource you are looking for (or one 
    of its dependencies) could have been removed, had its name 

custom errors for .net are not configured. 

**Error Handling in Apache**

Apache is a common HTTP server for serving HTML and PHP web pages. By default, Apache shows the server version, products installed and OS system in the HTTP error responses. 
Responses to the errors can be configured and customized globally, per site or per directory in the apache2.conf using the Error-Document directive [2] 

.. code-block:: html

    ErrorDocument 404 "Customized Not Found error message" 
    ErrorDocument 403 /myerrorpagefor403.html 
    ErrorDocument 501 http://www.externaldomain.com/errorp
    agefor501.html 

Site administrators are able to manage their own errors using .htaccess file if the global directive AllowOverride is configured properly in apache2.conf [3] 
The information shown by Apache in the HTTP errors can also be configured using the directives ServerTokens [4] and ServerSignature [5] at apache2.conf configuration file. "ServerSignature Off" (On by default) removes the server information from the error responses, while ServerTokens [ProductOnly|Major|Minor|Minimal|OS|Full] (Full by default) defines what information has to be shown in the error pages. 

**Error Handling in Tomcat**

Tomcat is a HTTP server to host JSP and Java Servlet applications. By default, Tomcat shows the server version in the HTTP error responses. 
Customization of the error responses can be configured in the configuration file web.xml. 

.. code-block:: html

    <error-page> 
        <error-code>404</error-code> 
        <location>/myerrorpagefor404.html</location> 
    </error-page> 

|